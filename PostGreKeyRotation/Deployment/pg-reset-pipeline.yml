trigger:
- none

stages:
- stage: ResetPostgreSQLRoles
  jobs:
  - job: ResetPostgreSQLRoles_Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Bash@3
        displayName: 'Installing PostgreSQL client'
        inputs:
          failOnStderr: false
          targetType: 'inline'
          script: |
            sudo apt-get install postgresql-client -y

      - task: Bash@3
        displayName: 'Resetting Roles'
        inputs:
          failOnStderr: true
          filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-reset-postgresql-roles.sh'
          workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
          arguments: '"<database-server-name>" "<database-name>" "<database-admin-role>"'

- stage: ResetKeyvault
  dependsOn:
  - ResetPostgreSQLRoles
  condition: succeeded('ResetPostgreSQLRoles')
  jobs:
  - job: ResetKeyvault_Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Resetting Keyvault'
      inputs:
        failOnStandardError: true
        azureSubscription: '<azure-subscription-id>'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-reset-keyvault.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'

- stage: ResetVariables
  dependsOn:
  - ResetPostgreSQLRoles
  - ResetKeyvault
  condition: and(succeeded('ResetPostgreSQLRoles'), succeeded('ResetKeyvault'))
  jobs:
  - job: ResetVariables_Job
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Bash@3
      displayName: 'Set currentActiveRole variable'
      inputs:
        failOnStderr: true
        filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-set-variable.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"pgapprolegreen" "$(System.TeamFoundationCollectionUri)$(System.TeamProject)" "$(System.AccessToken)"'

- stage: Deploy
  dependsOn:
  - ResetPostgreSQLRoles
  - ResetKeyvault
  - ResetVariables
  condition: and(succeeded('ResetPostgreSQLRoles'), succeeded('ResetKeyvault'), succeeded('ResetVariables'))
  jobs:
  - job: Deploy_Job
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: pipeline-variables
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Kubernetes'
        command: 'login'

    - task: HelmInstaller@1
      displayName: Install Helm
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: 'Deploy Prod'
      inputs:
        failOnStandardError: true
        azureSubscription: '<azure-subscription-id>'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-deploy-production.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"pgapprolegreen" "$(buildTag)"'