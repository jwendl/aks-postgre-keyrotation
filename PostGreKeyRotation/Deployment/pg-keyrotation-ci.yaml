# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pr:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: key-rotation-variables
- group: pipeline-variables

steps:
  - task: UseDotNet@2
    displayName: 'Ensure .NET Core SDK 3.1.100 is installed'
    inputs:
      packageType: sdk
      version: 3.1.100
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - task: DotNetCoreCLI@2
    displayName: 'Restore Nuget Packages'
    inputs:
      command: restore
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Build ASP.NET Core App'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation'
      arguments: '--configuration $(BuildConfiguration)'

  - task: DotNetCoreCLI@2
    displayName: 'Publish ASP.NET Core App'
    inputs:
      command: publish
      publishWebProjects: True
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation'
      arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)/PostGreKeyRotation/Deployment/BuildOutput'
      zipAfterPublish: True

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'PostGreKeyRotation'

  - task: Kubernetes@1
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'Kubernetes'
      command: 'login'

  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: '0.12.20'

  - task: TerraformTaskV1@0
    displayName: Initialize Terraform
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/terraform'
      backendServiceArm: '<service-principal-name>'
      backendAzureRmResourceGroupName: 'KeyRotateState'
      backendAzureRmStorageAccountName: 'jwtfkrstatestore'
      backendAzureRmContainerName: 'terraform-state'
      backendAzureRmKey: 'development.tfstate'

  - task: TerraformTaskV1@0
    displayName: Build Terraform Plan
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/terraform'
      commandOptions: '-var "subscription_id=<subscription-id>" -var "key_vault_resource_group_name=KeyRotation" -var "key_vault_app_registration_name=jwrotateapp" -var "key_vault_location=westus2" -var "key_vault_name=jwrotatekeyvault" -var "key_vault_tenant_id=<tenant-id>" -var "key_vault_tfsp_tenant_id=<tenant-id>" -var "key_vault_tfsp_object_id=<object-id>" -var "key_vault_akssp_tenant_id=<tenant-id>" -var "key_vault_akssp_object_id=<object-id>" -var "key_vault_azdosp_tenant_id=<tenant-id>" -var "key_vault_azdosp_object_id=<object-id>" -var "key_vault_app_tenant_id=<tenant-id>" -var "key_vault_app_object_id=<object-id>" -var "ag_gateway_name=jwrotateag" -var "container_registry_name=jwrotateacr" -var "sp_client_id=<client-id>" -var "sp_client_secret=<client-secret>" -var "cluster_name=jwrotatecluster" -var "dns_prefix=jwrotatecluster" -var "publicip_domainname=jwrotateapp" -var "agent_count=1" -var "postgre_server_name=jwpostgreserver" -var "postgre_db_name=jwpostgredb" --out key-rotate'
      environmentServiceNameAzureRM: '<service-principal-name>'

  - task: TerraformTaskV1@0
    displayName: Apply Terraform Plan
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/terraform'
      commandOptions: 'key-rotate'
      environmentServiceNameAzureRM: '<service-principal-name>'

  - task: Bash@3
    displayName: Apply PostGre DDL
    inputs:
      filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/deploy-ddl.sh'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
      arguments: '"<database-server-name>" "<database-name>" "<database-admin-role>"'

  - task: AzureCLI@2
    inputs:
      azureSubscription: '<service-principal-name>'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/set-keyvault-password.sh'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'

  - task: Docker@2
    displayName: "Build and Push Docker Image"
    inputs:
      command: buildAndPush
      repository: $(imageName)
      dockerfile: 'PostGreKeyRotation/PostGreKeyRotation/Dockerfile'
      buildContext : $(Build.Repository.LocalPath)
      containerRegistry: 'Container Registry'

  - task: HelmInstaller@1
    displayName: Install Helm
    inputs:
      helmVersionToInstall: 'latest'

  - task: AzureCLI@2
    displayName: Deploy Ingress Helm Chart using Shell
    inputs:
      failOnStandardError: true
      azureSubscription: '<service-principal-name>'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        helm repo add application-gateway-kubernetes-ingress https://appgwingress.blob.core.windows.net/ingress-azure-helm-package/
        helm repo update
        aksfqdn="$(az aks show --resource-group KeyRotation --name jwrotatecluster --query fqdn --output tsv)"
        helm upgrade --install ingress-azure --set verbosityLevel=3 --set appgw.subscriptionId=<subscription-id> --set appgw.resourceGroup=KeyRotation --set appgw.name=jwrotateag --set appgw.usePrivateIP=false --set appgw.shared=false --set armAuth.type=servicePrincipal --set armAuth.secretJSON="<auth-secret-string>" --set aksClusterConfiguration.apiServerAddress=$aksfqdn application-gateway-kubernetes-ingress/ingress-azure
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/helm'

  - task: AzureCLI@2
    displayName: 'Deploy Prod'
    inputs:
      failOnStandardError: true
      azureSubscription: '<service-principal-name>'
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-deploy-production.sh'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
      arguments: 'pgapprolegreen $(Build.BuildId) <database-server-name> <database-name>'

  - task: Bash@3
    displayName: 'Set buildTag Variable'
    inputs:
      failOnStderr: true
      filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/ci-set-buildtag.sh'
      workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
      arguments: '"$(Build.BuildId)" "$(System.TeamFoundationCollectionUri)$(System.TeamProject)" "$(System.AccessToken)"'