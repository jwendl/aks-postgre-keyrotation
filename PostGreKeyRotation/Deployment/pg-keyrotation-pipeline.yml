trigger:
- none

stages:
- stage: KeyRotation
  jobs:
  - job: KeyRotation_Job
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: key-rotation-variables
    steps:
    - task: Bash@3
      displayName: 'Installing PostgreSQL client'
      inputs:
        failOnStderr: false
        targetType: 'inline'
        script: |
          sudo apt-get install postgresql-client -y

    - task: AzureCLI@2
      displayName: 'Activate Inactive Role'
      inputs:
        failOnStandardError: true
        azureSubscription: '<azure-subscription-id>'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-rotate-keys.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"$(currentActiveRole)" "<database-server-name>" "<database-name>" "<database-admin-role>"'

- stage: DeployStaging
  dependsOn:
  - KeyRotation
  condition: succeeded('KeyRotation')
  jobs:
  - job: DeployStaging
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: key-rotation-variables
    - group: pipeline-variables
    steps:
    - task: Kubernetes@1
      displayName: 'Kubernetes Login'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Kubernetes'
        command: 'login'

    - task: HelmInstaller@1
      displayName: 'Install Helm'
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: 'Deploy Staging'
      inputs:
        failOnStandardError: true
        azureSubscription: '<azure-subscription-id>'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-deploy-staging.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"$(currentActiveRole)" "$(buildTag)" "<database-server-name>" "<database-name>"'

- stage: IntegrationTest
  dependsOn:
  - KeyRotation
  - DeployStaging
  condition: and(succeeded('KeyRotation'), succeeded('DeployStaging'))
  jobs:
  - job: IntegrationTest_Job
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: key-rotation-variables
    steps:
    - task: UseDotNet@2
      displayName: 'Ensure .NET Core SDK 3.1.100 is Installed'
      inputs:
        packageType: sdk
        version: 3.1.100
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Run Integration Tests'
      inputs:
        command: test
        projects: '**/*.IntegrationTests.csproj'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation'
        arguments: '--configuration $(buildConfiguration)'

- stage: WaitForApproval
  dependsOn:
  - KeyRotation
  - DeployStaging
  - IntegrationTest
  condition: and(succeeded('KeyRotation'), succeeded('DeployStaging'), succeeded('IntegrationTest'))
  jobs:
  - deployment: ApproveProductionDeployment
    environment: Production
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: key-rotation-variables
    - group: pipeline-variables
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              displayName: 'Touch'
              inputs:
                failOnStderr: false
                targetType: 'inline'
                script: 'echo "Waiting for approval..."'

- stage: SwapActiveRole
  dependsOn:
  - KeyRotation
  - DeployStaging
  - IntegrationTest
  - WaitForApproval
  condition: and(succeeded('KeyRotation'), succeeded('DeployStaging'), succeeded('IntegrationTest'), succeeded('WaitForApproval'))
  jobs:
  - job: DeployProduction
    pool:
      vmImage: 'ubuntu-latest'
    variables:
    - group: key-rotation-variables
    - group: pipeline-variables
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'Kubernetes'
        command: 'login'

    - task: HelmInstaller@1
      displayName: Install Helm
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: 'Deploy Production'
      inputs:
        failOnStandardError: true
        azureSubscription: '<azure-subscription-id>'
        scriptType: 'bash'
        scriptLocation: 'scriptPath'
        scriptPath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-deploy-production.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"$(currentActiveRole)" "$(buildTag)" "<database-server-name>" "<database-name>"'

    - task: Bash@3
      displayName: 'Installing PostgreSQL client'
      inputs:
        failOnStderr: false
        targetType: 'inline'
        script: |
          sudo apt-get install postgresql-client -y
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'

    - task: Bash@3
      displayName: 'Disable currentActiveRole and swap'
      inputs:
        failOnStderr: true
        filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-swap-active.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"$(currentActiveRole)" "<database-server-name>" "<database-name>" "<database-admin-role>"'

    - task: Bash@3
      displayName: 'Set currentActiveRole variable'
      inputs:
        failOnStderr: true
        filePath: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts/pg-set-variable.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/PostGreKeyRotation/Deployment/scripts'
        arguments: '"$(currentActiveRole)" "$(System.TeamFoundationCollectionUri)$(System.TeamProject)" "$(System.AccessToken)"'